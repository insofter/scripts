# This file is intended to be 'compiled' into a u-boot script image
# with mkimage tool and used during initial flashing of a icdtcp3 device.
# It will set up all necessry partitions and environment variables.
#
# Note: u-boot mkimage tool doesn't strip comments (lines beginning with #)
# and also doesn't support "\" line breakings. Before invoking mkimage
# filter them out. E.g.:
#
# cat icdtcp3-flash-script.txt | \
#   sed -e 's/#.*//' -e 's/^[[:space:]]*//' -e '/^$/ d' | \
#   sed -e '/[\]$/ { N; s:[\]\n:: }' > flash-script.tmp
#
# And build the image with the following command:
#
# mkimage -A arm -O linux -T script -C none -n "flash-script" \
#  -d flash-script.tmp flash-script.img

echo 'Setting up mtd partitions'
mtdparts default

echo 'Initializing ubi on mtd system partition'
ubi part system

echo 
echo 'Creating ubi system volumes'
ubi createvol bootcfg 0x40000 static
ubi createvol bootcfg-aux 0x40000 static
ubi createvol uImage-a 0x400000 static
ubi createvol uImage-b 0x400000 static
ubi createvol rootfs-a 0x2000000 dynamic
ubi createvol rootfs-b 0x2000000 dynamic

echo 'Writing bootcfg'
env set ubi-boot-vol a;
env export -t ${loadaddr} ubi-boot-vol;
ubi writevol ${loadaddr} bootcfg 0xE'
env set ubi-boot-vol;

echo 'Writing kernel uImage'
tftp ${loadaddr} uImage
ubi writevol ${fileaddr} uImage-a ${filesize}
ubi writevol ${fileaddr} uImage-b ${filesize}

echo 'Writing rootfs'
tftp ${loadaddr} rootfs.ubifs
ubi writevol ${fileaddr} rootfs-a ${filesize}
ubi writevol ${fileaddr} rootfs-b ${filesize}

echo 'Initializing ubi on mtd data partition'
ubi part data

echo 'Creating ubi data volume'
ubi createvol data # by default this is dynamic volume 
                   # occpying the whole partition

echo 'Writing data'
tftp ${loadaddr} data.ubifs
ubi writevol ${fileaddr} data ${filesize}

echo 'Loading factory settings'
tftp ${loadaddr} factory-settings.txt
env import -t ${loadaddr} ${filesize}

echo 'Setting up boot commands'
env set save-bootcfg 'env export -t ${loadaddr} ubi-boot-vol; \
  ubi writevol ${loadaddr} bootcfg 0xE'
env set load-bootcfg 'ubi readvol ${loadaddr} bootcfg; \
  env import -t ${loadaddr} 0xE; env print ubi-boot-vol'
env set setup-bootargs 'env set bootargs mem=64M console=ttyS0,115200 \
  ubi.mtd=3 ubi.mtd=4 root=ubi0:rootfs-${ubi-boot-vol} rootfstype=ubifs'
env set bootcmd 'ubi part system; run load-bootcfg; run setup-bootargs; \
  ubi readvol ${loadaddr} uImage-${ubi-boot-vol}; bootm'
env set update-bootstrap 'tftp ${loadaddr} at91bootstrap.bin; \
  nand erase.part bootstrap; nand write ${loadaddr} bootstrap ${filesize}'
env set update-u-boot 'tftp ${loadaddr} u-boot.bin; \
  nand erase.part u-boot; nand write ${loadaddr} u-boot ${filesize}'
env set update-uImage-a 'ubi part system; tftp ${loadaddr} uImage; \
  ubi writevol ${fileaddr} uImage-a ${filesize}'
env set update-uImage-b 'ubi part system; tftp ${loadaddr} uImage; \
  ubi writevol ${fileaddr} uImage-b ${filesize}'
env set update-rootfs-a 'ubi part system; tftp ${loadaddr} rootfs.ubifs; \
  ubi writevol ${fileaddr} rootfs-a ${filesize}'
env set update-rootfs-b 'ubi part system; tftp ${loadaddr} rootfs.ubifs; \
  ubi writevol ${fileaddr} rootfs-b ${filesize}'
env set update-data 'ubi part data; tftp ${loadaddr} data.ubifs; \
  ubi writevol ${fileaddr} data ${filesize}'
env set clean-bootstrap 'nand erase.part bootstrap'
env set clean-u-boot-env 'nand erase.part u-boot-env'
env set rm-bootcfg-vols 'ubi removevol bootcfg; ubi removevol bootcfg-aux'
env set rm-uImage-vols 'ubi removevol uImage-a; ubi removevol uImage-b'
env set rm-rootfs-vols 'ubi removevol rootfs-a; ubi removevol rootfs-b'
env set clean-sys-part 'ubi part system; run rm-bootcfg-vols; \
  run rm-uImage-vols; run rm-rootfs-vols'
env set clean-data-part 'ubi part data; ubi removevol data'
env set update-all 'run update-bootstrap; run update-u-boot; \
  run clean-u-boot-env; run clean-sys-part; run clean-data-part; reset'
env set set-bootcfg-a 'ubi part system; env set ubi-boot-vol a; \
  run save-bootcfg'
env set set-bootcfg-b 'ubi part system; env set ubi-boot-vol b; \
  run save-bootcfg'

echo 'Saving environment'
env set fileaddr
env set filesize
env save

echo 'DONE'
echo 

reset
